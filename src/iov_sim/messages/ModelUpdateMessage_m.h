//
// Generated file, do not edit! Created by opp_msgtool 6.0 from iov_sim/messages/ModelUpdateMessage.msg.
//

#ifndef __IOV_SIM_MODELUPDATEMESSAGE_M_H
#define __IOV_SIM_MODELUPDATEMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef IOV_SIM_API
#  if defined(IOV_SIM_EXPORT)
#    define IOV_SIM_API  OPP_DLLEXPORT
#  elif defined(IOV_SIM_IMPORT)
#    define IOV_SIM_API  OPP_DLLIMPORT
#  else
#    define IOV_SIM_API
#  endif
#endif


namespace iov_sim {

class ModelUpdateMessage;

}  // namespace iov_sim

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4


namespace iov_sim {

/**
 * Class generated from <tt>iov_sim/messages/ModelUpdateMessage.msg:27</tt> by opp_msgtool.
 * <pre>
 * packet ModelUpdateMessage extends veins::BaseFrame1609_4
 * {
 *     string data;
 *     veins::LAddress::L2Type senderAddress = -1;
 *     int serial = 0;
 * }
 * </pre>
 */
class IOV_SIM_API ModelUpdateMessage : public ::veins::BaseFrame1609_4
{
  protected:
    ::omnetpp::opp_string data;
    ::veins::LAddress::L2Type senderAddress = -1;
    int serial = 0;

  private:
    void copy(const ModelUpdateMessage& other);

  protected:
    bool operator==(const ModelUpdateMessage&) = delete;

  public:
    ModelUpdateMessage(const char *name=nullptr, short kind=0);
    ModelUpdateMessage(const ModelUpdateMessage& other);
    virtual ~ModelUpdateMessage();
    ModelUpdateMessage& operator=(const ModelUpdateMessage& other);
    virtual ModelUpdateMessage *dup() const override {return new ModelUpdateMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getData() const;
    virtual void setData(const char * data);

    virtual const ::veins::LAddress::L2Type& getSenderAddress() const;
    virtual ::veins::LAddress::L2Type& getSenderAddressForUpdate() { return const_cast<::veins::LAddress::L2Type&>(const_cast<ModelUpdateMessage*>(this)->getSenderAddress());}
    virtual void setSenderAddress(const ::veins::LAddress::L2Type& senderAddress);

    virtual int getSerial() const;
    virtual void setSerial(int serial);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ModelUpdateMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ModelUpdateMessage& obj) {obj.parsimUnpack(b);}


}  // namespace iov_sim


namespace omnetpp {

template<> inline iov_sim::ModelUpdateMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<iov_sim::ModelUpdateMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __IOV_SIM_MODELUPDATEMESSAGE_M_H

